<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="X-UA-Compatible" content="IE=Edge">
<meta name="viewport" content="initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<title>Pesudo Class & Pesudo Element</title>
<style>
    body, button{margin:0;}
    body{font:normal 18px/1.5 "Helvetica Neue",Helvetica Neue,Helvetica,Hiragino Sans GB,Microsoft Yahei,Arial;}
    
    .mod{overflow:hidden;}
    .mod .hdWrap.fixed{position:fixed;z-index:99;top:-1px;left:0;right:0;}
    .mod .ttl{padding:0 20px;font-size:16px;color:#333333;background:#CCCCCC;border:1px solid #999999;border-width:1px 0;font-weight:bold;}
    .mod .it{padding:20px;font-size:14px;border-bottom:1px solid #CCCCCC;}
    .mod .it:last-child{border:0;}
    
    .mod .it .code{white-space:pre-line;}
    .mod .it .code:first-line{font-size:0;}
    .mod .it .inspect{margin:10px 0;border:1px dashed #CCC;background:#F0F3F9;}
    
    
    .leadin{padding:20px;}
    
    
    #pronounce span{font-family:"lucida sans unicode",arial;position:relative;top:-3px;font-size:14px;font-weight:normal;margin-left:20px;color:green;}
    #pronounce h2 strong{font-weight:normal;font-family:"微软雅黑";font-size:25px;margin-right:10px;}
    #pronounce h2 b{margin:0 8px;}
    
    
</style>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js"></script>
<script type="text/javascript" src="http://www.zhangxinxu.com/study/js/jquery.htmlcode-1.0.js"></script></head>
<body>
    <div class="leadin">
        <h1>Pesudo Class & Pesudo Element</h1>
        
        <div id="pronounce">
            <h2>
                <strong>pseudo</strong>
                <span>[英]<b lang="EN-US" xml:lang="EN-US">['sju:dəʊ]</b></span>
                <span>[美]<b lang="EN-US" xml:lang="EN-US">['su:doʊ]</b></span>
            </h2>
        </div>

        <div class="cnt">
            <p>无论是伪类还是伪元素，都属于CSS选择器的范畴。所以它们的定义可以在CSS标准的选择器章节找到。<a href="http://www.w3.org/TR/selectors/" target="_blank">http://www.w3.org/TR/selectors/</a></p>
            <p>伪类和伪元素的引入都是因为在文档树里有些信息无法被充分描述，比如CSS没有“段落的第一行”之类的选择器。</p>
            <p>
                CSS Selector Level 3 为了区分这两者的混淆，而特意用冒号加以区分：<br>
                - 伪类用一个冒号表示 :first-child<br>
                - 伪元素则使用两个冒号表示 ::first-line
            </p>
            <p>
                伪类一开始单单只是用来表示一些元素的动态状态，典型的就是链接的各个状态(LVHA)。随后CSS2标准扩展了其概念范围，使其成为了所有逻辑上存在但在文档树中却无须标识的“幽灵”分类。<br>
                伪元素则代表了某个元素的子元素，这个子元素虽然在逻辑上存在，但却并不实际存在于文档树中。
            </p>
            <p>内容来自：<a href="http://www.swordair.com/blog/2012/12/606/" target="_blank">http://www.swordair.com/blog/2012/12/606/</a></p>
            
            <p>
                伪类：<br>
                - 动态伪类【 :link ， :visited 、 :hover ， :active ， :focus 】 <br>
                - 目标伪类【 :target 】 <br>
                - 语言伪类【 :lang 】 <br>
                - UI元素状态伪类【 :enabled ， :disabled 、 :checked 】 <br>
                - 结构伪类【 :root ， :nth-child() ， :nth-last-child() ， :nth-of-type() ， :nth-last-of-type() ， :first-child ， :last-child ， :first-of-type ， :last-of-type ， :only-child:only-of-type ， :empty 】 <br>
                - 否定伪类【 :not() 】 
            </p>
            <p>
                伪元素：<br>
                - ::first-line <br>
                - ::first-letter <br>
                - ::before ， ::after <br>
                - ::selection 
            </p>
            <p></p>
            <p></p>
            <p></p>
        </div>
    </div>
    
    <div class="mod">
        <div class="hd">
            <div class="hdWrap"><div class="ttl">:link ， :visited 、 :hover ， :active ， :focus</div></div>
        </div>
        <div class="bd">
            <div class="ls">
                <div class="it hover">
                    <h3>链接点击之后变色</h3>
                    <style>
                        .hover .demo a{-webkit-transition:all 1s linear;}
                        .hover .demo a:hover{color:#000;padding-right:120px;background-color:#CCC;}
                    </style>
                    <div class="demo"><a href="#hover">ANCHOR</a></div>
                    <div class="opt"><button onclick="document.querySelector('.hover .demo').innerHTML = '<a href=#hover?' + Math.random() + '>ANCHOR</a>'">换个链接</button></div>
                </div>
            </div>
        </div>
    </div>
    
    
    <div class="mod">
        <div class="hd">
            <div class="hdWrap"><div class="ttl">:target</div></div>
        </div>
        <div class="bd">
            <div class="ls">
                <div class="it target">
                    <h3>target实现Tab切换</h3>
                    <style>
                        .target .demo .tabs{position:absolute;z-index:1;width:61px;}
                        .target .demo .tab{display:block;border:1px solid #CCC;padding:10px;text-align:center;margin-bottom:-1px;}
                        .target .demo .contents{margin-left:60px;width:240px;height:200px;background:#EEE;}
                        .target .demo .content{-webkit-transition:all 1s linear;height:200px;width:0;overflow:hidden;background:#FFF;float:left;}
                        .target .demo .content .wrap{border:1px solid #CCC;padding:10px;-webkit-box-sizing:border-box;height:100%;}
                        .target .demo .content:target{width:240px;}
                    </style>
                    <div class="demo">
                        <div class="tabs">
                            <a href="#target-tab-content-1" class="tab">tab-1</a>
                            <a href="#target-tab-content-2" class="tab">tab-2</a>
                            <a href="#target-tab-content-3" class="tab">tab-3</a>
                        </div>
                        <div class="contents">
                            <div class="content" id="target-tab-content-1"><div class="wrap">content-1</div></div>
                            <div class="content" id="target-tab-content-2"><div class="wrap">content-2</div></div>
                            <div class="content" id="target-tab-content-3"><div class="wrap">content-3</div></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    
    <div class="mod">
        <div class="hd">
            <div class="hdWrap"><div class="ttl">:enabled ， :disabled 、 :checked</div></div>
        </div>
        <div class="bd">
            <div class="ls">
                <div class="it checked">
                    <h3>checked实现Tab切换</h3>
                    <style>
                        .checked .demo .tabs{width:240px;padding-left:60px;}
                        
                        .checked .demo .tab-radio{display:none;}
                        .checked .demo .tab{display:block;width:61px;-webkit-box-sizing:border-box;border:1px solid #CCC;padding:10px;text-align:center;float:left;margin-bottom:-1px;margin-right:-1px;margin-left:-60px;clear:left;}
                        
                        .checked .demo .content{-webkit-transition:all 1s linear;height:0;overflow:hidden;background:#FFF;}
                        .checked .demo .content .wrap{border:1px solid #CCC;padding:10px;-webkit-box-sizing:border-box;height:100%;}
                        
                        .checked .demo #checked-tab-1:checked ~ #checked-tab-content-1,
                        .checked .demo #checked-tab-2:checked ~ #checked-tab-content-2,
                        .checked .demo #checked-tab-3:checked ~ #checked-tab-content-3{height:200px;}
                    </style>
                    <div class="demo">
                        <div class="tabs">
                            <input type="radio" name="checked-tab" id="checked-tab-1" class="tab-radio" checked>
                            <label for="checked-tab-1" class="tab">tab-1</label>
                            <input type="radio" name="checked-tab" id="checked-tab-2" class="tab-radio">
                            <label for="checked-tab-2" class="tab">tab-2</label>
                            <input type="radio" name="checked-tab" id="checked-tab-3" class="tab-radio">
                            <label for="checked-tab-3" class="tab">tab-3</label>
                            <div class="content" id="checked-tab-content-1"><div class="wrap">content-1</div></div>
                            <div class="content" id="checked-tab-content-2"><div class="wrap">content-2</div></div>
                            <div class="content" id="checked-tab-content-3"><div class="wrap">content-3</div></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    
    <div class="mod">
        <div class="hd">
            <div class="hdWrap"><div class="ttl">:nth-child() ， :nth-last-child() ， :nth-of-type() ， :nth-last-of-type() ， :first-child ， :last-child ， :first-of-type ， :last-of-type ， :only-child:only-of-type ， :empty</div></div>
        </div>
        <div class="bd">
            <div class="ls">
                <div class="it nth-child">
                    <h3>说明</h3>
                    <div class="code">
                        :root 根元素，一般指html
                        :nth-child() 选择某个元素的一个或多个特定的子元素
                        :nth-last-child() 选择某个元素的一个或多个特定的子元素，从这个元素的最后一个子元素开始算
                        :nth-of-type() 选择指定的元素
                        :nth-last-of-type() 选择指定的元素，从元素的最后一个开始计算
                        :fist-child 选择某个元素的第一个子元素
                        :last-child 选择某个元素的最后一个子元素
                        :first-of-type 选择一个上级元素下的第一个同类子元素
                        :last-of-type 选择一个上级元素的最后一个同类子元素
                        :only-child 选择的元素是它的父元素的唯一一个了元素
                        :only-of-type 选择一个元素是它的上级元素的唯一一个相同类型的子元素
                        :empty 选择的元素里面没有任何内容
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    
    <div class="mod">
        <div class="hd">
            <div class="hdWrap"><div class="ttl">::before ， ::after</div></div>
        </div>
        <div class="bd">
            <div class="ls">
                <div class="it after after-1">
                    <h3>生成固定文字内容</h3>
                    <style>.after-1 .demo a:after{content:'（新窗口）';}</style>
                    <div class="demo">
                        点击<a href="http://m.sohu.com" target="_blank">这个链接</a>转到手机搜狐
                    </div>
                </div>
                <div class="it after after-2">
                    <h3>生成元素属性</h3>
                    <style>.after-2 .demo a:after{content:'(' attr(href) ')';}</style>
                    <div class="demo">
                        点击<a href="http://m.sohu.com" target="_blank">这个链接</a>转到手机搜狐
                    </div>
                </div>
                <div class="it after after-3">
                    <h3>图片替换文字</h3>
                    <style>.after-3 .demo a{content:url(http://s2.rr.itc.cn/w/u/0/20130130160833_35.png);}</style>
                    <div class="demo">
                        点击<a href="http://m.sohu.com" target="_blank">这个链接</a>转到手机搜狐
                    </div>
                </div>
                <div class="it after after-4">
                    <h3>用计数器创建号码内容</h3>
                    <style>
                        .after-4 .demo ol{counter-reset:sectioncounter;}
                        .after-4 .demo ol li:before{content:'第' counter(sectioncounter) '条';counter-increment:sectioncounter;}
                    </style>
                    <div class="demo">
                        <ol>
                            <li></li>
                            <li></li>
                            <li></li>
                        </ol>
                        <p>代码来自：<a href="http://www.zhangxinxu.com/wordpress/?p=739" target="_blank">http://www.zhangxinxu.com/wordpress/?p=739</a></p>
                    </div>
                </div>
                <div class="it after after-5">
                    <h3>为多语言内容插入正确的引号</h3>
                    <style>
                        /* 为不同语言指定引号的表现 */
                        .after-5 .demo :lang(en) > q {quotes:'"' '"';}
                        .after-5 .demo :lang(no) > q {quotes:"«" "»";}
                        .after-5 .demo :lang(ch) > q {quotes:"“" "”";}

                        /* 在q标签的前后插入引号 */
                        .after-5 .demo q:before {content:open-quote;}
                        .after-5 .demo q:after  {content:close-quote;}
                    </style>
                    <div class="demo">
                        <p lang="en"><q>It’s only work if somebody makes you do it.</q></p>
                        <p lang="no"><q>Hvis du forteller meg nok en vits, så skal jeg slå deg til jorden.</q></p>
                        <p lang="ch"><q>欢迎来到上海，欢迎参观世博会！</q></p>
                        <p>代码来自：<a href="http://www.zhangxinxu.com/wordpress/?p=739" target="_blank">http://www.zhangxinxu.com/wordpress/?p=739</a></p>
                    </div>
                    
                    <h3>content属性说明</h3>
                    <div class="code">
                        取值: normal | none | [ &lt;string> | &lt;uri> | &lt;counter> | attr(&lt;identifier>) | open-quote | close-quote | no-open-quote | no-close-quote ]+ | inherit
                    </div>
                    
                    <h3>quotes属性说明</h3>
                    <div class="code">
                        语法：quotes：none | [&lt;string> &lt;string>]+
                        取值：
                            none：content属性的open-quote和close-quote值将不会生成任何标记
                            &lt;string>：定义content属性的open-quote和close-quote值的标记，2个为一组
                    </div>
                </div>
                <div class="it after after-6">
                    <h3>before/after伪元素与transition/animation</h3>
                    <style>
                        @-webkit-keyframes iLoading{
                              0% {-webkit-transform:rotate(0deg);} 
                            100% {-webkit-transform:rotate(-360deg);} 
                        }
                        .after-6 .demo .btn{display:block;width:120px;padding:10px;background:#348ED5;border:1px solid #77B4D2;border-radius:5px;box-shadow:0 2px 2px 0px #BDBDBD, 0 1px 0px 0px rgba(255, 255, 255, 0.62) inset;text-decoration:none;}
                        .after-6 .demo .btn b{display:block;font-size:18px;text-align:center;color:#FFF;text-shadow:0 1px 2px #000;}
                        .after-6 .demo .loading b:before{font-family:"wingdings 3";content:"Q";display:inline-block;margin-right:10px;}
                        .after-6 .demo .loading b:before{-webkit-animation:iLoading 1s linear 0 infinite normal;}
                    </style>
                    <div class="demo">
                        <p><a href="javascript:;" class="btn" onclick="this.classList.toggle('loading')"><b>发表中</b></a></p>
                    </div>
                    
                    <h3>美妙案例</h3>
                    <div class="code">
                        DEMO：<a href="http://tympanus.net/Development/PseudoElementsAnimationsTransitions/index2.html" target="_blank">http://tympanus.net/Development/PseudoElementsAnimationsTransitions/index2.html</a>
                        原理说明：<a href="http://www.zhangxinxu.com/wordpress/?p=3357" target="_blank">http://www.zhangxinxu.com/wordpress/?p=3357</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    
    <div class="mod">
        <div class="hd">
            <div class="hdWrap"><div class="ttl">::selection</div></div>
        </div>
        <div class="bd">
            <div class="ls">
                <div class="it selection">
                    <h3>说明</h3>
                    <style>.selection .demo .selection::selection{background:#B00;color:#FFF;}</style>
                    <div class="demo">
                        只能设置两个属性： <span class="selection">background</span> 和 <span class="selection">color</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    
    <script>
        function onScroll(e) {
            var mods, mod, i, hd, bd, hdTop, hdHeight, bdBottom, windowTop, el;
            
            mods = document.querySelectorAll('.mod');
            mods = [].slice.call(mods);
            windowTop = window.scrollY;
            
            mods.forEach(function(val, i) {
                mod = val;
                hd = mod.querySelector('.hd');
                bd = mod.querySelector('.bd');
                hdTop = hd.offsetTop + 1;  // border-top
                hdHeight = hd.offsetHeight;
                bdBottom = hdTop + bd.offsetHeight + 1;  // border-bottom
                el = mod.querySelector('.hdWrap');
                hd.style.height = el.offsetHeight + 'px';
                
                if (hdTop <= windowTop && windowTop <= bdBottom + hdHeight) {
                    el.classList.add('fixed');
                    if (windowTop > bdBottom) {
                        el.style.marginTop = bdBottom - windowTop + 'px';
                    }
                    else {
                        el.style.marginTop = '';
                    }
                }
                else {
                    el.classList.remove('fixed');
                    el.style.marginTop = '';
                }
            });
        };
        
        window.addEventListener('scroll', onScroll, false);
    </script>
</body>
</html>
