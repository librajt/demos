<!DOCTYPE HTML>
<html>
<head>
<meta name="viewport" content="width=device-width,minimum-scale=1.0,maximum-scale=1.0" />
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<title></title>
<link rel="stylesheet/less" type="text/css" href="ie10.less">
<script src="/h5/css/lib/less/less.js" type="text/javascript"></script>
<script>setTimeout("localStorage.clear();", 2000);</script></head>
<body>

<div class="demo">
    <ol>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
    </ol>
    <div class="status"></div>
    <div class="btns">
        <a href="javascript:;" class="btn" onclick="m.move()">STEP</a>
        |
        <a href="javascript:;" class="btn" onclick="m.move(true)">AUTO</a>
        |
        <a href="javascript:;" class="btn" onclick="m.pause()">PAUSE</a>
    </div>
</div>

<script src="/h5/js/src/commons/vendor.js"></script>
<script type="text/javascript">
    var hasPointerSupport = navigator.msPointerEnabled;
    var IE10Plus = /IE (1\d)/.exec(navigator.userAgent);
    var _EVT_DOWN = 'ontouchstart' in window ? 'touchstart' : hasPointerSupport ? 'MSPointerDown' : 'mousedown';
    var _EVT_MOVE = 'ontouchmove'  in window ? 'touchmove'  : hasPointerSupport ? 'MSPointerMove' : 'mousemove';
    var _EVT_UP   = 'ontouchend'   in window ? 'touchend'   : hasPointerSupport ? 'MSPointerUp'   : 'mouseup';
    var _EVT_TRANSITIONEND = ('ontransitionend' in window || IE10Plus) ? 'transitionend' : vendor.vendor + 'TransitionEnd';
    
    function _EVT_WRAP(e) {
        if (_EVT_DOWN == 'touchstart') {
            if (!e.touches[0]) return;
            e.x = e.touches[0].pageX;
            e.y = e.touches[0].pageY;
        }
        else if (_EVT_DOWN == 'MSPointerDown') {
            e.x = e.tiltX;
            e.y = e.tiltY;
        }
        else {
            e.x = e.pageX;
            e.y = e.pageX;
        }
    }

    var marque = function(args) {
        var _ = this;
        _.cellWidth = 100;
        _.step = 300;
        _.duration = 400;
        _.forward = true;  // ' --<--------'
        _.parent = document.querySelector(args.parent);
        _.el = document.querySelector(args.el);
        _.el.style.width = _.el.children.length * _.cellWidth + 'px';
        _.width = _.el.clientWidth;
        
        _.startX = _.lastX = _.curX = 0;
        
        _.transform(0);
        _.initTransition();
        
        _.bindSwipe();
        
        if (args.auto) {
            _.move(true);
        }
        else {
            _.pause();
        }

    };
    
    marque.prototype = {
        move: function(auto) {
            var _ = this;
            _.pause();
            _.status('RUNNING');
            if (_.forward) {
                _.log('cur:  --<--------');
                _.curX -= _.step;
                if (_.curX <= -_.width + _.step) {
                    _.curX = -_.width + _.step
                    _.forward = !_.forward;
                    _.log('next:  -->');
                }
            }
            else {
                _.log('cur:  -->--------');
                _.curX += _.step;
                if (_.curX >= 0) {
                    _.curX = 0;
                    _.forward = !_.forward;
                    _.log('next:  <--');
                }
            }
            
            _.transform(_.curX);
            _.lastX = _.curX;
            
            var _ = this;
            if (auto) {
                _.tick = setTimeout(function() { _.move(auto); }, 2000);
                setTimeout(function() { _.status('AUTO'); }, _.duration);
            }
            else {
                setTimeout(function() { _.pause(); }, _.duration);
            }
        },
        
        pause: function() {
            clearTimeout(this.tick);
            this.status('PAUSED');
        },
        
        bindSwipe: function() {
            var _ = this;
            function start(e) {
                _EVT_WRAP(e);
                _.pause();
                _.startX = e.x;
                _.transition('none');
                _.el.addEventListener(_EVT_MOVE, drag, 0);
            }
            function end(e) {
                if (_.forward && _.curX > _.lastX) {
                    _.log('next:  -->');
                    _.forward = !_.forward;
                }
                else if (!_.forward && _.curX < _.lastX) {
                    _.log('next:  <--');
                    _.forward = !_.forward;
                }
                
                _.lastX = _.curX;
                _.curX = _.lastX == 0 ? 0 : Math.floor(_.lastX / _.cellWidth + (_.forward ? 1 : 0)) * _.cellWidth;
                _.initTransition();
                _.move(true);
                _.el.removeEventListener(_EVT_MOVE, drag, 0);
            }
            function drag(e) {
                _EVT_WRAP(e);
                e.preventDefault(); 
                _.curX = e.x - _.startX + _.lastX; 
                //if (_.curX <= 0 && _.curX >= (_.step - _.width)) {
                    _.transform(_.curX);
                //}
                //else {
                //    _.curX = (_.curX > 0 ? 0 : _.step - _.width);
                //}
            }
            
            _.el.addEventListener(_EVT_DOWN, start, 0);
            _.el.addEventListener(_EVT_UP, end, 0);
        },
        
        transform: function(x) {
            this.el.style[vendor.transform] = 'translate3D(' + x + 'px, 0, 0)';
        },
        
        transition: function(t) {
            this.el.style[vendor.transition] = t;
        },
        
        initTransition: function() {
            var _ = this;
            _.transition(vendor.cssVendor + 'transform ' + _.duration / 1000 + 's');
        },
        
        status: function(s) {
            this.parent.querySelector('.status').innerHTML = s;
        },
        
        log: function(e) {
            if (this.debug) console.log(e);
        }
    
    };
    
    
    window.m = new marque({
        //auto: true,
        parent: '.demo',
        el: '.demo ol'
    });
    //m.debug = true;

    
    
    
    




</script>
</body>
</html>